{"version":3,"sources":["store/auth/actions.ts","store/profile/actions.ts","store/message/actions.ts","store/posts/actions.ts","store/post/actions.ts","store/comments/actions.ts","store/like/actions.ts","components/Footer/NavWraper/style.module.scss","components/Header/style.module.scss","components/Header/DropdownMenu/style.module.scss","components/Header/RightAuthMenu/style.module.scss","store/addPost/actions.ts","components/Footer/style.module.scss","history.jsx","store/auth/reducers.ts","store/profile/reducers.ts","store/posts/reducers.ts","store/post/reducers.ts","store/message/reducers.ts","store/comments/reducers.ts","store/like/reducers.ts","store/rootReducer.ts","services/api.ts","store/auth/sagas.ts","store/profile/sagas.ts","services/helpers.ts","store/posts/sagas.ts","store/post/sagas.ts","store/addPost/sagas.ts","store/message/sagas.ts","store/comments/sagas.ts","store/like/sagas.ts","store/rootSaga.ts","Routes.tsx","components/Header/DropdownMenu/index.tsx","components/Header/RightAuthMenu/index.tsx","components/Header/index.tsx","components/Footer/NavWraper/index.tsx","components/Footer/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["authUser","createAsyncAction","unAuthUser","createAction","deleteError","regUser","getProfile","deleteSuccess","setProfile","setAvatar","setMessage","deleteToastMessage","getMessages","getPosts","setPostsLimit","setPostsSort","togglePreloader","getPostCard","deletePostCard","getComments","setComment","getLike","setLike","module","exports","addPost","history","createBrowserHistory","initialState","authData","authToken","error","id","login","profileData","_id","nick","avatar","url","followers","following","success","postsData","pagesCount","postsLimit","sortType","isFetching","postCardData","userId","postDate","title","userDate","images","likesCount","likes","owner","isPost","failure","messagesData","limit","commentsData","likeData","rootReducer","combineReducers","router","connectRouter","auth","state","action","type","getType","actions","payload","localStorage","removeItem","profile","posts","postCard","message","comments","like","getHeaders","method","headers","Accept","Authorization","queryFetch","data","a","fetch","then","response","json","queryComments","query","body","JSON","stringify","variables","CommentFind","mutationComments","text","post","answerTo","CommentUpsert","queryLike","LikeFind","idPhotos","img","PostUpsert","upLoadPhoto","queryPostData","advQuery","adId","PostFindOne","queryPostsData","PostFind","queryPostsCount","PostCount","getAuthToken","password","regUserRequest","createUser","queryMessages","MessageFind","mutationMessage","imgId","to","image","MessageUpsert","queryMessageCount","MessageCount","queryUserData","userQuery","UserFindOne","mutationUserData","UserUpsert","addAvatarToUser","avaId","authUserSaga","regUserSaga","jwtData","jwtDecode","sub","put","take","request","call","setItem","console","push","getUserData","setUserData","idUser","select","userData","imgData","result","handlerComentsData","map","d","createdAt","formatDate","answers","handlerLikeData","Date","Number","toLocaleString","handlerPostImg","oldImages","refPhotos","jwtToken","i","photo","current","elements","files","length","FormData","date","toLocaleDateString","handlerImagesPost","getPostCountFilter","quest","filter","___owner","$or","description","getPostsDataQuery","postCount","page","sort","skip","Math","ceil","handlerPostsData","handlerMessagesData","phones","join","getPostsData","queryCountAdvs","queryPosts","getPostCardData","advData","setPostSaga","log","setMessageSaga","getMessageSaga","refPhoto","queryCount","messageCount","checkPage","queryMessage","getCommentsSaga","setCommentSaga","idPost","postId","getLikeSaga","rootSaga","all","spawn","Posts","React","lazy","Login","Singin","Settings","Profile","RegSuccess","PostCard","NotFound","AddPost","PostSuccess","Likes","connect","memo","props","Suspense","fallback","className","exact","from","path","component","closeMenuHandler","isMobile","elem","document","getElementById","M","Sidenav","getInstance","close","Fragment","onClick","style","href","data-target","classnames","logIn","dispatch","bindActionCreators","authActions","useEffect","dropdowns","querySelectorAll","Dropdown","init","addEventListener","e","elems","NavWrapper","h100","dropdownPosition","navWraper","navBar","src","alt","profileActions","footer","NavWraper","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","routerMiddleware","run","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.00d80980.chunk.js","sourcesContent":["import { createAsyncAction, createAction } from \"typesafe-actions\";\nimport { AuthCreds, IJwtData } from \"./types\";\n\nexport const authUser = createAsyncAction(\n  \"auth/AUTH_USER_REQUEST\",\n  \"auth/AUTH_USER_SUCCESS\",\n  \"auth/AUTH_USER_FAILURE\"\n)<AuthCreds, IJwtData, string>();\n\nexport const unAuthUser = createAction(\"auth/UN_AUTH_USER\")();\n\nexport const deleteError = createAction(\"auth/DELETE_ERROR\")();\n\nexport const regUser = createAsyncAction(\n  \"auth/REG_USER_SUCCESS\",\n  \"auth/REG_USER_FAILURE\",\n  \"auth/REG_USER_REQUEST\"\n)<AuthCreds, string, string>();\n","import { createAsyncAction, createAction } from \"typesafe-actions\";\nimport {\n  IProfileData,\n  ISetProfileData,\n  IAvatar,\n  IGetProfileRequest,\n} from \"./types\";\n\nexport const getProfile = createAsyncAction(\n  \"profile/GET_PROFILE_REQUEST\",\n  \"profile/GET_PROFILE_SUCCESS\",\n  \"profile/GET_PROFILE_FAILURE\"\n)<IGetProfileRequest | void, IProfileData, string>();\n\nexport const deleteSuccess = createAction(\"profile/DELETE_SUCCESS\")();\n\nexport const setProfile = createAsyncAction(\n  \"profile/SET_PROFILE_REQUEST\",\n  \"profile/SET_PROFILE_SUCCESS\",\n  \"profile/SET_PROFILE_FAILURE\"\n)<ISetProfileData, string, string>();\n\nexport const setAvatar = createAsyncAction(\n  \"profile/SET_AVATAR_REQUEST\",\n  \"profile/SET_AVATAR_SUCCESS\",\n  \"profile/SET_AVATAR_FAILURE\"\n)<FormData, IAvatar, string>();\n","import {createAsyncAction, createAction} from 'typesafe-actions'\nimport {IMessagePayload, IPageData, IPageNumber} from './types'\n\nexport const setMessage = createAsyncAction(\n    \"message/SET_MESSAGE_REQUEST\",\n    \"message/SET_MESSAGE_SUCCESS\",\n    \"message/SET_MESSAGE_FAILURE\",\n)<IMessagePayload, string, string>()\n\nexport const deleteToastMessage = createAction(\n    \"message/DELTE_TOAST_MESSAGE\"\n)()\n\nexport const getMessages = createAsyncAction(\n    \"message/GET_MESSAGE_REQUEST\",\n    \"message/GET_MESSAGE_SUCCESS\",\n    \"message/GET_MESSAGE_FAILURE\",\n)<IPageNumber, IPageData, string>()","import { createAsyncAction, createAction } from \"typesafe-actions\";\nimport { IGetPostsSuccess, IPostsPayload } from \"./types\";\n\nexport const getPosts = createAsyncAction(\n  \"posts/GET_POSTS_REQUEST\",\n  \"posts/GET_POSTS_SUCCESS\",\n  \"posts/GET_POSTS_FAILURE\"\n)<IPostsPayload, IGetPostsSuccess, string>();\n\nexport const setPostsLimit = createAction(\"posts/SET_POSTS_LIMIT\")<number>();\n\nexport const setPostsSort = createAction(\"posts/SET_POSTS_SORT\")<string>();\n\nexport const togglePreloader = createAction(\"posts/TOGGLE_PRELOADER\")();\n","import { createAsyncAction, createAction } from \"typesafe-actions\";\nimport { IPostcardData } from \"./types\";\n\nexport const getPostCard = createAsyncAction(\n  \"post/GET_POST_CARD_REQUEST\",\n  \"post/GET_POST_CARD_SUCCESS\",\n  \"post/GET_POST_CARD_FAILURE\"\n)<string, IPostcardData, boolean>();\n\nexport const deletePostCard = createAction(\"post/DELETE_POST_CARD\")();\n","import { createAsyncAction } from 'typesafe-actions'\nimport { IGetCommentsRequest, IGetCommentsSuccess, ISetCommentPayload } from './types'\n\nexport const getComments = createAsyncAction(\n    \"comment/GET_COMMENT_REQUEST\",\n    \"comment/GET_COMMENT_SUCCESS\",\n    \"comment/GET_COMMENT_FAILURE\"\n)<IGetCommentsRequest, IGetCommentsSuccess[], void>()\n\nexport const setComment = createAsyncAction(\n    \"comment/SET_COMMENT_REQUEST\",\n    \"comment/SET_COMMENT_SUCCESS\",\n    \"comment/SET_COMMENT_FAILURE\"\n)<ISetCommentPayload, string, void>()","import { createAsyncAction } from \"typesafe-actions\";\nimport { IGetLikeRequest, IGetLikeSuccess, ISetLikePayload } from \"./types\";\n\nexport const getLike = createAsyncAction(\n  \"like/GET_LIKE_REQUEST\",\n  \"like/GET_LIKE_SUCCESS\",\n  \"like/GET_LIKE_FAILURE\"\n)<IGetLikeRequest, IGetLikeSuccess[], void>();\n\nexport const setLike = createAsyncAction(\n  \"like/SET_LIKE_REQUEST\",\n  \"like/SET_LIKE_SUCCESS\",\n  \"like/SET_LIKE_FAILURE\"\n)<ISetLikePayload, string, void>();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navWraper\":\"style_navWraper__3ID-Y\",\"navBar\":\"style_navBar__1Ss_b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dropdownPosition\":\"style_dropdownPosition__1eZ92\",\"NavWrapper\":\"style_NavWrapper__1RyZc\",\"h100\":\"style_h100__3U-41\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"close\":\"style_close__1P2S6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logIn\":\"style_logIn__1uGUb\",\"nick\":\"style_nick__3ZeOo\"};","import { createAsyncAction, createAction } from \"typesafe-actions\";\nimport { IAdv } from \"./types\";\n\nexport const addPost = createAsyncAction(\n  \"addPost/ADD_POST_REQUEST\",\n  \"addPost/ADD_POST_SUCCESS\",\n  \"addPost/ADD_POST_FAILURE\"\n)<IAdv, void, void>();\n\nexport const checkUserData = createAction(\"addPost/CHECK_USER_DATA\")();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"style_footer__os6By\"};","import { createBrowserHistory } from \"history\";\nconst history = createBrowserHistory();\nexport default history;\n","import { getType } from \"typesafe-actions\";\n\nimport * as actions from \"./actions\";\nimport { IAuthState, IAuthAction } from \"./types\";\n\nconst initialState: IAuthState = {\n  authData: {\n    authToken: \"\",\n    error: \"\",\n    id: \"\",\n    login: \"\",\n  },\n};\n\nexport default (\n  state: IAuthState = initialState,\n  action: IAuthAction\n): IAuthState => {\n  switch (action.type) {\n    case getType(actions.authUser.success):\n      return {\n        ...state,\n        authData: {\n          ...state.authData,\n          authToken: action.payload.authToken,\n          id: action.payload.id,\n          login: action.payload.login,\n        },\n      };\n    case getType(actions.authUser.failure):\n      return {\n        ...state,\n        authData: {\n          authToken: null,\n          error: action.payload,\n          id: null,\n          login: null,\n        },\n      };\n    case getType(actions.unAuthUser):\n      localStorage.removeItem(\"authToken\");\n      return {\n        ...state,\n        authData: {\n          authToken: null,\n          error: null,\n          id: null,\n          login: null,\n        },\n      };\n    case getType(actions.deleteError):\n      return {\n        ...state,\n        authData: {\n          ...state.authData,\n          error: null,\n        },\n      };\n    default:\n      return state;\n  }\n};\n","import { getType } from \"typesafe-actions\";\n\nimport * as actions from \"./actions\";\nimport { IProfileDataState, IProfileAction } from \"./types\";\n\nconst initialState: IProfileDataState = {\n  profileData: {\n    _id: \"\",\n    login: \"\",\n    nick: \"\",\n    avatar: {\n      _id: \"\",\n      url: \"\",\n    },\n    followers: {\n      _id: \"\",\n    },\n    following: {\n      _id: \"\",\n    },\n    error: \"\",\n    success: \"\",\n  },\n};\n\nexport default (\n  state: IProfileDataState = initialState,\n  action: IProfileAction\n) => {\n  switch (action.type) {\n    case getType(actions.getProfile.success):\n      return {\n        ...state,\n        profileData: {\n          ...state.profileData,\n          _id: action.payload._id,\n          login: action.payload.login,\n          nick: action.payload.nick,\n          avatar: action.payload.avatar,\n          followers: action.payload.followers,\n          following: action.payload.following,\n        },\n      };\n    case getType(actions.getProfile.failure):\n      return {\n        ...state,\n        profileData: {\n          ...state.profileData,\n          error: action.payload,\n        },\n      };\n    case getType(actions.setProfile.success):\n      return {\n        ...state,\n        profileData: {\n          ...state.profileData,\n          success: action.payload,\n        },\n      };\n    case getType(actions.deleteSuccess):\n      return {\n        ...state,\n        profileData: {\n          ...state.profileData,\n          success: \"\",\n        },\n      };\n    case getType(actions.setAvatar.success):\n      return {\n        ...state,\n        profileData: {\n          ...state.profileData,\n          avatar: {\n            ...state.profileData.avatar,\n            _id: action.payload._id,\n            url: action.payload.url,\n          },\n        },\n      };\n    default:\n      return state;\n  }\n};\n","import { getType } from \"typesafe-actions\";\nimport * as actions from \"./actions\";\nimport { IPostsAction, IState } from \"./types\";\n\nconst initialState: IState = {\n  postsData: [],\n  pagesCount: 1,\n  postsLimit: 12,\n  sortType: \"dateDesc\",\n  isFetching: false,\n};\n\nexport default (state: IState = initialState, action: IPostsAction): IState => {\n  switch (action.type) {\n    case getType(actions.getPosts.success):\n      return {\n        ...state,\n        postsData: [...action.payload.postsData],\n        pagesCount: action.payload.pagesCount,\n      };\n    case getType(actions.setPostsLimit):\n      return { ...state, postsLimit: action.payload };\n    case getType(actions.setPostsSort):\n      return { ...state, sortType: action.payload };\n    case getType(actions.togglePreloader):\n      return { ...state, isFetching: !state.isFetching };\n    default:\n      return state;\n  }\n};\n","import * as actions from \"./actions\";\nimport { getType } from \"typesafe-actions\";\nimport { IPostState, IPostCardAction } from \"./types\";\n\nconst initialState: IPostState = {\n  postCardData: {\n    _id: \"\",\n    userId: \"\",\n    postDate: \"\",\n    title: \"\",\n    userDate: \"\",\n    nick: \"\",\n    avatar: \"\",\n    images: [{ url: \"\", _id: \"\" }],\n    likesCount: 0,\n    likes: [{ _id: \"\", owner: { _id: \"\" } }],\n  },\n  isPost: true,\n};\n\nexport default (\n  state: IPostState = initialState,\n  action: IPostCardAction\n): IPostState => {\n  switch (action.type) {\n    case getType(actions.getPostCard.success):\n      return {\n        ...state,\n        postCardData: {\n          ...state.postCardData,\n          ...action.payload,\n        },\n      };\n    case getType(actions.getPostCard.failure):\n      return { ...state, isPost: false };\n    case getType(actions.deletePostCard):\n      return {\n        ...state,\n        postCardData: {\n          ...state.postCardData,\n          ...initialState.postCardData,\n        },\n        isPost: true,\n      };\n    default:\n      return state;\n  }\n};\n","import { getType } from 'typesafe-actions';\nimport * as actions from './actions'\nimport { IMessageState, TMessageAction } from './types'\n\nconst initialState: IMessageState = {\n    success: '',\n    failure: '',\n    messagesData: [],\n    pagesCount: 1,\n    limit: 5\n}\n\nexport default (state: IMessageState = initialState, action: TMessageAction): IMessageState => {\n    switch (action.type) {\n        case getType(actions.setMessage.success):\n            return { ...state, success: action.payload }\n        case getType(actions.setMessage.failure):\n            return { ...state, failure: action.payload }\n        case getType(actions.deleteToastMessage):\n            return { ...state, success: '', failure: '' }\n        case getType(actions.getMessages.success):\n            return {\n                ...state, \n                messagesData: [\n                    ...action.payload.messagesData\n                ],\n                pagesCount: action.payload.pagesCount\n            }\n        default:\n            return state\n    }\n}\n\n","import { getType } from 'typesafe-actions';\nimport * as actions from './actions'\nimport { TCommentsAction, ICommentsState } from './types'\n\nconst initialState: ICommentsState = {\n    commentsData: []\n}\n\nexport default (state: ICommentsState = initialState, action: TCommentsAction): ICommentsState => {\n    switch (action.type) {\n        case getType(actions.getComments.success):\n            return {...state, commentsData: action.payload}\n        default:\n            return state\n    }\n}\n\n","import { getType } from \"typesafe-actions\";\nimport * as actions from \"./actions\";\nimport { TLikeAction, ILikeState } from \"./types\";\n\nconst initialState: ILikeState = {\n  likeData: [],\n};\n\nexport default (\n  state: ILikeState = initialState,\n  action: TLikeAction\n): ILikeState => {\n  switch (action.type) {\n    case getType(actions.getLike.success):\n      return { ...state, likeData: action.payload };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport { StateType, EmptyAction } from \"typesafe-actions\";\nimport { connectRouter } from \"connected-react-router\";\n\nimport history from \"../history\";\nimport authReducer from \"./auth/reducers\";\nimport { AuthAction } from \"./auth/types\";\nimport { IProfileAction } from \"./profile/types\";\nimport profileReducer from \"./profile/reducers\";\nimport { IPostsAction } from \"./posts/types\";\nimport postsReducer from \"./posts/reducers\";\nimport { IPostCardAction } from \"./post/types\";\nimport postCardReducer from \"./post/reducers\";\nimport { AddAdvAction } from \"./addPost/types\";\nimport messageReducer from \"./message/reducers\";\nimport { TMessageAction } from \"./message/types\";\nimport commentsReducer from \"./comments/reducers\";\nimport { TCommentsAction } from \"./comments/types\";\nimport likeReducer from \"./like/reducers\";\nimport { TLikeAction } from \"./like/types\";\n\nconst rootReducer = combineReducers({\n  router: connectRouter(history),\n  auth: authReducer,\n  profile: profileReducer,\n  posts: postsReducer,\n  postCard: postCardReducer,\n  message: messageReducer,\n  comments: commentsReducer,\n  like: likeReducer,\n});\n\nexport type IRootState = StateType<typeof rootReducer>;\nexport type IRootAction =\n  | AuthAction\n  | EmptyAction<string>\n  | IProfileAction\n  | IPostsAction\n  | IPostCardAction\n  | AddAdvAction\n  | TMessageAction\n  | TCommentsAction\n  | TLikeAction;\n\nexport default rootReducer;\n","import {\n  TGetCommentQuery,\n  IFilterPosts,\n  TPostsData,\n  TGetLikeQuery,\n} from \"../store/posts/types\";\nimport { IMessageFilter, TQueryMessage } from \"../store/message/types\";\n\nfunction getHeaders(authToken: string) {\n  return {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n      Authorization: \"Bearer \" + authToken,\n    },\n  };\n}\n\nexport async function queryFetch(data: object, url: string) {\n  return fetch(url, data).then((response) => response.json());\n}\n\n//Comments\n\nexport async function queryComments(\n  authToken: string,\n  query: TGetCommentQuery\n) {\n  const data = {\n    ...getHeaders(authToken),\n    body: JSON.stringify({\n      query: `query getComments($query:String){\n                CommentFind(query: $query){\n                  _id, createdAt, text, owner{nick, avatar{url}, _id},\n                  answers{_id, createdAt, text, owner{nick, avatar{url}, _id},\n                    answers{_id, createdAt, text, owner{nick, avatar{url}, _id}}\n                    }\n                }\n              }`,\n      variables: { query: JSON.stringify(query) },\n    }),\n  };\n  return queryFetch(data, \"/graphql\").then((data) => data.data.CommentFind);\n}\n\nexport async function mutationComments(\n  authToken: string,\n  text: string,\n  post: string,\n  answerTo: string | null\n) {\n  let variables = {\n    text: text,\n    post: { _id: post },\n    answerTo: { _id: answerTo },\n  };\n  !answerTo && delete variables.answerTo;\n  const data = {\n    ...getHeaders(authToken),\n    body: JSON.stringify({\n      query: `mutation setComment($text:String, $post:PostInput, $answerTo: CommentInput) {\n                CommentUpsert(comment:{text: $text, post: $post, answerTo:$answerTo}){\n                  _id\n                }\n              }`,\n      variables,\n    }),\n  };\n  return queryFetch(data, \"/graphql\").then(\n    (data) => data.data.CommentUpsert._id\n  );\n}\n\n//like\n\nexport async function mutationLike(\n  authToken: string,\n  text: string,\n  post: string,\n  answerTo: string | null\n) {\n  let variables = {\n    text: text,\n    post: { _id: post },\n    answerTo: { _id: answerTo },\n  };\n\n  const data = {\n    ...getHeaders(authToken),\n    body: JSON.stringify({\n      query: `mutation setLike($post:PostInput, $answerTo: UserInput) {\n                LikeUpsert(like:{post: $post, user:$answerTo}){\n                  _id\n                }\n              }`,\n      variables,\n    }),\n  };\n  return queryFetch(data, \"/graphql\").then((data) => data.data.LikeUpsert._id);\n}\n\nexport async function queryLike(authToken: string, query: TGetLikeQuery) {\n  const data = {\n    ...getHeaders(authToken),\n    body: JSON.stringify({\n      query: `query getLike($query:String) {\n                LikeFind(query: $query){\n                  _id post{_id} owner{nick, avatar{url}, _id}\n                }\n              }`,\n      variables: { query: JSON.stringify(query) },\n    }),\n  };\n  return queryFetch(data, \"/graphql\").then((data) => data.data.LikeFind);\n}\n\nexport async function delLike(authToken: string, query: TGetCommentQuery) {\n  const data = {\n    ...getHeaders(authToken),\n    body: JSON.stringify({\n      query: `mutation delLike($_id:ID) {\n                LikeDelete(_id: $_id){\n                  _id\n                }\n              }`,\n      variables: { query: JSON.stringify(query) },\n    }),\n  };\n  return queryFetch(data, \"/graphql\").then(\n    (data) => data.data.CommentUpsert._id\n  );\n}\n\n//addPost\n\ninterface IPhoto {\n  _id: string;\n}\n\nexport const addPost = async (\n  authToken: string,\n  title: string,\n  idPhotos: IPhoto[],\n  _id: string | null\n) => {\n  const variables = {\n    title: title,\n    img: idPhotos,\n    _id: _id,\n  };\n  if (!_id) delete variables._id;\n  const data = {\n    ...getHeaders(authToken),\n    body: JSON.stringify({\n      query: `mutation addPost($_id: ID, $title: String, $img:[ImageInput]) {\n              PostUpsert(post:{_id: $_id, title: $title, images: $img }) {\n                _id\n              }\n            }`,\n      variables,\n    }),\n  };\n\n  return await queryFetch(data, \"/graphql\").then(\n    (data) => data.data.PostUpsert._id\n  );\n};\n\nexport async function upLoadPhoto(authToken: string, body: FormData) {\n  const data = {\n    method: \"POST\",\n    headers: authToken ? { Authorization: \"Bearer \" + authToken } : {},\n    body: body,\n  };\n\n  return await queryFetch(data, \"/upload\").then((data) => data._id);\n}\n\n//postsCard\n\nexport const queryPostData = async (id: string, authToken: string) => {\n  const advQuery = `[{\"_id\": \"${id}\"}]`;\n  const data = {\n    ...getHeaders(authToken),\n    body: JSON.stringify({\n      query: `query getPost($adId: String){\n                            PostFindOne(query: $adId) {\n                              _id,\n                              createdAt,\n                              owner{_id, nick, avatar{url},createdAt},\n                              images{url, _id},\n                              title,\n                              likes{_id, owner{_id}},\n                              likesCount\n                            }\n                          }`,\n      variables: { adId: advQuery },\n    }),\n  };\n\n  return await queryFetch(data, \"/graphql\").then(\n    (data) => data.data.PostFindOne\n  );\n};\n\n// Advs\n\nexport const queryPostsData = async (authToken: string, query: TPostsData) => {\n  const data = {\n    ...getHeaders(authToken),\n    body: JSON.stringify({\n      query: `query getPosts($query: String){\n                PostFind(query: $query) {\n                _id,\n                images{\n                 url\n                }\n                createdAt,\n                title,\n                likesCount,\n                comments{\n                  _id\n                }\n                }\n            }`,\n      variables: { query: JSON.stringify(query) },\n    }),\n  };\n\n  return await queryFetch(data, \"/graphql\").then((data) => data.data.PostFind);\n};\n\nexport const queryPostsCount = async (\n  authToken: string,\n  query: IFilterPosts[]\n) => {\n  const data = {\n    ...getHeaders(authToken),\n    body: JSON.stringify({\n      query: `query countPosts($query:String){\n                PostCount(query: $query)\n              }`,\n      variables: { query: JSON.stringify(query) },\n    }),\n  };\n\n  return await queryFetch(data, \"/graphql\").then((data) => data.data.PostCount);\n};\n\n// auth\n\nexport const getAuthToken = async (login: string, password: string) => {\n  const data = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    },\n    body: JSON.stringify({\n      query: `query login($login: String!, $password: String!){\n          login(login:$login, password:$password)\n          }`,\n      variables: { login: login, password: password },\n    }),\n  };\n\n  return await queryFetch(data, \"/graphql\").then((data) => data.data.login);\n};\n\nexport const regUserRequest = async (login: string, password: string) => {\n  const data = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    },\n    body: JSON.stringify({\n      query: `mutation reg($login: String!, $password: String!) {\n                createUser(login: $login, password: $password) {\n                  _id\n                }\n              }`,\n      variables: { login: login, password: password },\n    }),\n  };\n\n  return await queryFetch(data, \"/graphql\").then(\n    (data) => data.data.createUser\n  );\n};\n\n// message\n\nexport async function queryMessages(authToken: string, query: TQueryMessage) {\n  const data = {\n    ...getHeaders(authToken),\n    body: JSON.stringify({\n      query: `query incomingMessage($query: String) {\n          MessageFind(query: $query){\n            _id createdAt text \n            image {url}\n            owner {nick avatar{url} phones}\n          }\n        }`,\n      variables: { query: JSON.stringify(query) },\n    }),\n  };\n\n  return await queryFetch(data, \"/graphql\").then(\n    (data) => data.data.MessageFind\n  );\n}\n\nexport async function mutationMessage(\n  authToken: string,\n  userId: string,\n  text: string,\n  imgId: string | null\n) {\n  const data = {\n    ...getHeaders(authToken),\n    body: JSON.stringify({\n      query: `mutation sendMessage($to:UserInput, $text:String, $image:ImageInput){\n              MessageUpsert(message:{to:$to, text:$text, image:$image}){\n                _id\n              }\n            }`,\n      variables: { to: { _id: userId }, text: text, image: { _id: imgId } },\n    }),\n  };\n\n  return await queryFetch(data, \"/graphql\").then(\n    (data) => data.data.MessageUpsert._id\n  );\n}\n\nexport const queryMessageCount = async (\n  authToken: string,\n  query: IMessageFilter[]\n) => {\n  const data = {\n    ...getHeaders(authToken),\n    body: JSON.stringify({\n      query: `query countAds($query:String){\n                MessageCount(query: $query)\n              }`,\n      variables: { query: JSON.stringify(query) },\n    }),\n  };\n\n  return await queryFetch(data, \"/graphql\").then(\n    (data) => data.data.MessageCount\n  );\n};\n\n// profile\n\nexport async function queryUserData(userId: string, authToken: string) {\n  const userQuery = `[{\"_id\": \"${userId}\"}]`;\n  const data = {\n    ...getHeaders(authToken),\n    body: JSON.stringify({\n      query: `query getUsers($userQuery: String){\n                  UserFindOne(query: $userQuery){\n                    _id login nick\n                    avatar{\n                      _id\n                      url\n                    }\n                    likesCount\n                    followers {\n                      _id\n                      login nick\n                      avatar{\n                        _id\n                        url\n                      }\n                    }\n                    following {\n                      _id\n                      login nick\n                      avatar{\n                        _id\n                        url\n                      }\n                    }\n                  }\n                }`,\n      variables: { userQuery: userQuery },\n    }),\n  };\n\n  return queryFetch(data, \"/graphql\").then((data) => data.data.UserFindOne);\n}\n\nexport async function mutationUserData(\n  userId: string,\n  authToken: string,\n  login: string,\n  nick: string\n) {\n  const data = {\n    ...getHeaders(authToken),\n    body: JSON.stringify({\n      query: `mutation userUpdate ($id: String, $login: String, $nick: String){\n          UserUpsert(user:{\n            _id:$id, login:$login, nick:$nick\n          })\n          {\n            _id\n          }\n        }`,\n      variables: {\n        id: userId,\n        login: login,\n        nick: nick,\n      },\n    }),\n  };\n\n  return await queryFetch(data, \"/graphql\").then(\n    (data) => data.data.UserUpsert._id\n  );\n}\n\nexport async function addAvatarToUser(\n  authToken: string,\n  userId: string,\n  avaId: string\n) {\n  const data = {\n    ...getHeaders(authToken),\n    body: JSON.stringify({\n      query: `mutation addAvatarToUser ($id: String, $avaId: ID){\n          UserUpsert(user:{\n            _id:$id, avatar:{_id: $avaId}\n          })\n          {\n            avatar{_id url}\n          }\n        }`,\n      variables: { id: userId, avaId: avaId },\n    }),\n  };\n\n  return await queryFetch(data, \"/graphql\").then(\n    (data) => data.data.UserUpsert.avatar\n  );\n}\n","import { take, call, put } from \"redux-saga/effects\";\nimport jwtDecode from \"jwt-decode\";\n\nimport * as actions from \"./actions\";\nimport { push } from \"connected-react-router\";\nimport { IJWTData } from \"./types\";\nimport { getAuthToken, regUserRequest } from \"../../services/api\";\n\nexport function* authUserSaga() {\n  if (localStorage.authToken) {\n    const jwtData: IJWTData = jwtDecode(localStorage.authToken);\n    const authToken = localStorage.authToken;\n    const id = jwtData.sub?.id;\n    const login = jwtData.sub?.login;\n    yield put(actions.authUser.success({ authToken, id, login }));\n  }\n  while (true) {\n    const {\n      payload: { login, password },\n    } = yield take(actions.authUser.request);\n\n    try {\n      const authToken = yield call(getAuthToken, login, password);\n\n      if (authToken) {\n        const jwtData = yield jwtDecode(authToken);\n        const id = jwtData.sub.id;\n        const login = jwtData.sub.login;\n        yield put(actions.authUser.success({ authToken, id, login }));\n        localStorage.setItem(\"authToken\", authToken);\n      } else {\n        yield put(actions.authUser.failure(\"Wrong login or password\"));\n      }\n    } catch (error) {\n      console.error(\"error saga: \", error);\n      yield put(actions.authUser.failure(\"Server error\"));\n    }\n  }\n}\n\nexport function* regUserSaga() {\n  while (true) {\n    const { payload } = yield take(actions.regUser.request);\n    try {\n      const result = yield call(\n        regUserRequest,\n        payload.login,\n        payload.password\n      );\n      if (result) {\n        yield put(push(\"/regsuccess\"));\n      } else {\n        yield put(\n          actions.authUser.failure(\"Такой пользователь уже существует\")\n        );\n      }\n    } catch (error) {\n      console.error(error);\n      yield put(actions.authUser.failure(\"Сервер не доступен\"));\n    }\n  }\n}\n","import { take, call, put, select } from \"redux-saga/effects\";\nimport * as actions from \"./actions\";\nimport {\n  upLoadPhoto,\n  queryUserData,\n  mutationUserData,\n  addAvatarToUser,\n} from \"../../services/api\";\n\nexport function* getUserData() {\n  while (true) {\n    const {\n      payload: { idUser },\n    } = yield take(actions.getProfile.request);\n    const authToken = yield select((state) => state.auth.authData.authToken);\n    const userId = yield select((state) => state.auth.authData.id);\n\n    try {\n      const userData = yield call(\n        queryUserData,\n        idUser ? idUser : userId,\n        authToken\n      );\n      yield put(actions.getProfile.success(userData));\n    } catch (error) {\n      console.error(error);\n      yield put(actions.getProfile.failure(\"Server is not available\"));\n    }\n  }\n}\n\nexport function* setUserData() {\n  while (true) {\n    const {\n      payload: { login, nick },\n    } = yield take(actions.setProfile.request);\n    const authToken = yield select((state) => state.auth.authData.authToken);\n    const userId = yield select((state) => state.auth.authData.id);\n    try {\n      const result = yield call(\n        mutationUserData,\n        userId,\n        authToken,\n        login,\n        nick\n      );\n      if (result) {\n        yield put(actions.setProfile.success(\"Data changed successfully\"));\n        const userData = yield call(queryUserData, userId, authToken);\n        yield put(actions.getProfile.success(userData));\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n}\n\nexport function* setAvatar() {\n  while (true) {\n    const { payload } = yield take(actions.setAvatar.request);\n    const authToken = yield select((state) => state.auth.authData.authToken);\n    const userId = yield select((state) => state.auth.authData.id);\n    try {\n      const imgData = yield call(upLoadPhoto, authToken, payload);\n      const result = yield call(addAvatarToUser, authToken, userId, imgData);\n      yield put(actions.setAvatar.success(result));\n    } catch (error) {\n      console.error(error);\n    }\n  }\n}\n","import { IAdv } from \"../store/addPost/types\";\nimport { IImages, IPostcardData, IPostCardPayload } from \"../store/post/types\";\nimport {\n  IFilterPosts,\n  ISortPosts,\n  TPostsData,\n  IPostsDataPayload,\n} from \"../store/posts/types\";\nimport { IMessageData, IMessageDataPayload } from \"../store/message/types\";\nimport {\n  IGetCommentsSuccess,\n  ICommentsDataPayload,\n} from \"../store/comments/types\";\nimport { IGetLikeSuccess, ILikeDataPayload } from \"../store/like/types\";\nimport { upLoadPhoto } from \"./api\";\n\nexport const handlerComentsData = (\n  commentsData: ICommentsDataPayload[]\n): IGetCommentsSuccess[] => {\n  return (\n    commentsData &&\n    commentsData.map((d) => {\n      return {\n        _id: d._id,\n        text: d.text ? d.text : \"No text\",\n        createdAt: formatDate(d.createdAt),\n        avatar: d.owner.avatar?.url\n          ? d.owner.avatar?.url\n          : \"images/696abe18feffa8c402f137b7423a869e\",\n        nick: d.owner.nick ? d.owner.nick : \"No name\",\n        answers: d.answers !== null ? handlerComentsData(d.answers) : null,\n      };\n    })\n  );\n};\n\n//like\nexport const handlerLikeData = (\n  likeData: ILikeDataPayload[]\n): IGetLikeSuccess[] => {\n  return (\n    likeData &&\n    likeData.map((d) => {\n      return {\n        _id: d._id,\n        text: d.text ? d.text : \"No text\",\n        createdAt: new Date(Number(d.createdAt)).toLocaleString(),\n        avatar: d.owner.avatar?.url\n          ? d.owner.avatar?.url\n          : \"images/696abe18feffa8c402f137b7423a869e\",\n        nick: d.owner.nick ? d.owner.nick : \"No name\",\n        answers: d.answers !== null ? handlerComentsData(d.answers) : null,\n      };\n    })\n  );\n};\n\n//AddPost\n\nexport async function handlerPostImg(\n  oldImages: IAdv[\"oldImages\"],\n  refPhotos: any,\n  jwtToken: string\n) {\n  const idPhotos = [];\n  for (let i = 0; i < 1; i++) {\n    let imgId = oldImages && oldImages[i]?._id ? oldImages[i]._id : null;\n    const photo = refPhotos[i]?.current?.elements[0] as HTMLInputElement;\n    if (!photo) {\n      return;\n    }\n    if (photo.files?.length) {\n      const body = new FormData(refPhotos[i].current);\n      imgId = await upLoadPhoto(jwtToken, body);\n    }\n\n    idPhotos.push({ _id: imgId });\n  }\n  return idPhotos;\n}\n\n//AdvCard\n\nexport function formatDate(date: string): string {\n  return new Date(Number(date)).toLocaleDateString();\n}\n\nexport function handlerImagesPost(images: IImages[] | null) {\n  if (images && images.length > 0 && images[0].url) {\n    let result = [];\n    for (let img of images) {\n      img.url &&\n        result.push({\n          url: `http://hipstagram.asmer.fs.a-level.com.ua/${img.url}`,\n          _id: img._id,\n        });\n    }\n    return result;\n  } else {\n    return [];\n  }\n}\n\nexport function handlerPostCardData(\n  postCardData: IPostCardPayload\n): IPostcardData {\n  return {\n    _id: postCardData._id,\n    userId: postCardData.owner._id,\n    postDate: formatDate(postCardData.createdAt),\n    title: postCardData.title || \"No text\",\n    userDate: formatDate(postCardData.owner.createdAt),\n\n    nick: postCardData.owner.nick ? postCardData.owner.nick : \"No name\",\n    avatar: postCardData.owner.avatar\n      ? `http://hipstagram.asmer.fs.a-level.com.ua/${postCardData.owner.avatar.url}`\n      : \"https://apollo-ireland.akamaized.net/v1/files/76ojf53mron92-UA/image;s=261x203\",\n    images: handlerImagesPost(postCardData.images),\n    likesCount: Number(postCardData.likesCount),\n    likes: postCardData.likes,\n  };\n}\n\n//Posts\n\nexport function getPostCountFilter(\n  type: string,\n  quest: string,\n  userId: string\n): IFilterPosts {\n  let filter: IFilterPosts = type === \"myposts\" ? { ___owner: userId } : {};\n  quest &&\n    (filter.$or = [{ title: `/${quest}/` }, { description: `/${quest}/` }]);\n  return filter;\n}\n\nexport function getPostsDataQuery(\n  filter: IFilterPosts,\n  postCount: number,\n  page: number,\n  limit: number,\n  sortType: string\n): TPostsData {\n  let sort: ISortPosts[] = [];\n  switch (sortType) {\n    case \"dateDesc\":\n      sort = [{ _id: -1 }];\n      break;\n  }\n  const checkPage =\n    page * limit > postCount ? Math.ceil(postCount / limit) - 1 : page - 1;\n\n  const skip = checkPage * limit;\n  return [filter, { limit: [limit], skip: [skip], sort }];\n}\n\nexport function handlerPostsData(postsData: IPostsDataPayload[]) {\n  return postsData.map((d: IPostsDataPayload) => {\n    return {\n      ...d,\n      title: d.title || \"No text\",\n      createdAt: new Date(Number(d.createdAt)).toLocaleString(),\n      images:\n        d.images && d.images[0]?.url\n          ? `http://hipstagram.asmer.fs.a-level.com.ua/${d.images[0].url}`\n          : \"https://boatparts.com.ua/design/boatparts/images/no_image.png\",\n      likesCount: d.likesCount || \"0\",\n      comments: d.comments ? d.comments.length : \"0\",\n    };\n  });\n}\n\n// message\n\nexport function handlerMessagesData(\n  messagesData: IMessageDataPayload[]\n): IMessageData[] {\n  return messagesData.map((d: IMessageDataPayload) => {\n    return {\n      _id: d._id,\n      text: d.text ? d.text : \"Не умею писать\",\n      createdAt: formatDate(d.createdAt),\n      image: d.image?.url ? d.image.url : null,\n      avatar: d.owner.avatar?.url\n        ? d.owner.avatar?.url\n        : \"images/696abe18feffa8c402f137b7423a869e\",\n      nick: d.owner.nick ? d.owner.nick : \"Безымянный\",\n      phones: d.owner.phones?.length\n        ? d.owner.phones.join(\", \")\n        : \"Нет телефона\",\n    };\n  });\n}\n","import { take, put, call, select } from \"redux-saga/effects\";\nimport * as actions from \"./actions\";\nimport { queryPostsData, queryPostsCount } from \"../../services/api\";\nimport {\n  getPostCountFilter,\n  getPostsDataQuery,\n  handlerPostsData,\n} from \"../../services/helpers\";\n\nexport function* getPostsData() {\n  while (true) {\n    const {\n      payload: { type, page, quest, idUser },\n    } = yield take(actions.getPosts.request);\n    const authToken = yield select((state) => state.auth.authData.authToken);\n    const userId = yield select((state) => state.auth.authData.id);\n    const limit = yield select((state) => state.posts.postsLimit);\n    const sortType = yield select((state) => state.posts.sortType);\n    yield put(actions.togglePreloader());\n    try {\n      const filter = getPostCountFilter(type, quest, idUser ? idUser : userId);\n      let queryCountAdvs = [filter];\n      const postCount = yield call(queryPostsCount, authToken, queryCountAdvs);\n      if (postCount > 0) {\n        const pagesCount = Math.ceil(postCount / limit);\n        let queryPosts = getPostsDataQuery(\n          filter,\n          postCount,\n          page,\n          limit,\n          sortType\n        );\n        const result = yield call(queryPostsData, authToken, queryPosts);\n        const postsData = handlerPostsData(result);\n        yield put(actions.getPosts.success({ postsData, pagesCount }));\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    yield put(actions.togglePreloader());\n  }\n}\n","import { take, put, call, select } from \"redux-saga/effects\";\nimport * as actions from \"./actions\";\nimport { handlerPostCardData } from \"../../services/helpers\";\nimport { queryPostData } from \"../../services/api\";\n\nexport function* getPostCardData() {\n  while (true) {\n    const { payload } = yield take(actions.getPostCard.request);\n    const jwtToken = yield select((state) => state.auth.authData.authToken);\n    try {\n      const result = yield call(queryPostData, payload, jwtToken);\n      if (result) {\n        const advData = handlerPostCardData(result);\n        yield put(actions.getPostCard.success(advData));\n      } else {\n        yield put(actions.getPostCard.failure(false));\n      }\n    } catch (e) {\n      console.error(e);\n      yield put(actions.getPostCard.failure(false));\n    }\n  }\n}\n","import { push } from \"connected-react-router\";\nimport { select, take, call, put } from \"redux-saga/effects\";\nimport * as actions from \"./actions\";\nimport { addPost } from \"../../services/api\";\nimport { handlerPostImg } from \"../../services/helpers\";\n\nexport function* setPostSaga() {\n  while (true) {\n    const {\n      payload: { title, oldImages, refPhotos, _id },\n    } = yield take(actions.addPost.request);\n    const jwtToken = yield select((state) => state.auth.authData.authToken);\n    try {\n      const idPhotos = yield call(\n        handlerPostImg,\n        oldImages,\n        refPhotos,\n        jwtToken\n      );\n      console.log(idPhotos);\n      const result = yield call(addPost, jwtToken, title, idPhotos, _id);\n      if (result) yield put(push(\"/postsaccess\"));\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n","import { select, take, call, put } from \"redux-saga/effects\";\nimport * as actions from \"./actions\";\nimport {\n  upLoadPhoto,\n  mutationMessage,\n  queryMessageCount,\n  queryMessages,\n} from \"../../services/api\";\nimport { TQueryMessage, IMessageFilter } from \"./types\";\nimport { handlerMessagesData } from \"../../services/helpers\";\n\nexport function* setMessageSaga() {\n  while (true) {\n    const {\n      payload: { userId, text, refPhoto },\n    } = yield take(actions.setMessage.request);\n    const authToken = yield select((state) => state.auth.authData.authToken);\n    try {\n      let imgId = null;\n      if (refPhoto.current?.elements[0].files.length) {\n        imgId = yield call(\n          upLoadPhoto,\n          authToken,\n          new FormData(refPhoto.current)\n        );\n      }\n      const result = yield call(\n        mutationMessage,\n        authToken,\n        userId,\n        text,\n        imgId\n      );\n      if (result)\n        yield put(actions.setMessage.success(\"Сообщение успешно отправлено\"));\n    } catch (e) {\n      yield put(actions.setMessage.failure(\"Сбой в матрице\"));\n      console.error(e);\n    }\n  }\n}\n\nexport function* getMessageSaga() {\n  while (true) {\n    const {\n      payload: { page },\n    } = yield take(actions.getMessages.request);\n    const authToken = yield select((state) => state.auth.authData.authToken);\n    const userId = yield select((state) => state.auth.authData.id);\n    const limit = yield select((state) => state.message.limit);\n    try {\n      const queryCount: IMessageFilter[] = [{ \"to._id\": userId }];\n      const messageCount = yield call(queryMessageCount, authToken, queryCount);\n      const pagesCount = Math.ceil(messageCount / limit);\n      const checkPage =\n        page * limit > messageCount\n          ? Math.ceil(messageCount / limit) - 1\n          : page - 1;\n      let queryMessage: TQueryMessage = [\n        { \"to._id\": userId },\n        { sort: [{ _id: -1 }], limit: [limit], skip: [checkPage * limit] },\n      ];\n      const result = yield call(queryMessages, authToken, queryMessage);\n      const messagesData = handlerMessagesData(result);\n      yield put(actions.getMessages.success({ messagesData, pagesCount }));\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n","import { TGetCommentQuery } from \"./../posts/types\";\nimport { take, select, call, put } from \"redux-saga/effects\";\nimport * as actions from \"./actions\";\nimport { handlerComentsData } from \"../../services/helpers\";\nimport { queryComments, mutationComments } from \"../../services/api\";\n\nexport function* getCommentsSaga() {\n  while (true) {\n    const {\n      payload: { idPost },\n    } = yield take(actions.getComments.request);\n    const jwtToken = yield select((state) => state.auth.authData.authToken);\n    try {\n      const query: TGetCommentQuery = [\n        { \"post._id\": idPost, answerTo: null },\n        { sort: [{ _id: 1 }] },\n      ];\n      const result = yield call(queryComments, jwtToken, query);\n      const commentsData = handlerComentsData(result);\n      yield put(actions.getComments.success(commentsData));\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n\nexport function* setCommentSaga() {\n  while (true) {\n    const {\n      payload: { answerTo, text },\n    } = yield take(actions.setComment.request);\n    const jwtToken = yield select((state) => state.auth.authData.authToken);\n    const postId = yield select((state) => state.postCard.postCardData._id);\n    try {\n      yield call(mutationComments, jwtToken, text, postId, answerTo);\n      yield put(actions.getComments.request({ idPost: postId }));\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n","import { TGetLikeQuery } from \"../posts/types\";\nimport { take, select, call, put } from \"redux-saga/effects\";\nimport * as actions from \"./actions\";\nimport { handlerLikeData } from \"../../services/helpers\";\nimport { queryLike, mutationLike } from \"../../services/api\";\n\nexport function* getLikeSaga() {\n  while (true) {\n    const {\n      payload: { idPost },\n    } = yield take(actions.getLike.request);\n    const authToken = yield select((state) => state.auth.authData.authToken);\n    const userId = yield select((state) => state.auth.authData.id);\n    try {\n      console.log(idPost);\n      const query: TGetLikeQuery = [\n        {\n          \"owner._id\": idPost ? null : userId,\n          answerTo: null,\n          \"post._id\": idPost,\n        },\n        { sort: [{ _id: 1 }] },\n      ];\n      const result = yield call(queryLike, authToken, query);\n      const likeData = handlerLikeData(result);\n      yield put(actions.getLike.success(likeData));\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n\nexport function* setLikeSaga() {\n  while (true) {\n    const {\n      payload: { user, _id },\n    } = yield take(actions.setLike.request);\n    const authToken = yield select((state) => state.auth.authData.authToken);\n    const idPost = yield select((state) => state.advCard.advCardData._id);\n    try {\n      yield call(mutationLike, authToken, idPost, _id, user);\n      yield put(actions.getLike.request({ idPost: idPost }));\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n","import { all, spawn } from \"redux-saga/effects\";\nimport { authUserSaga, regUserSaga } from \"./auth/sagas\";\nimport { getUserData, setUserData, setAvatar } from \"./profile/sagas\";\nimport { getPostsData } from \"./posts/sagas\";\nimport { getPostCardData } from \"./post/sagas\";\nimport { setPostSaga } from \"./addPost/sagas\";\nimport { setMessageSaga, getMessageSaga } from \"./message/sagas\";\nimport { getCommentsSaga, setCommentSaga } from \"./comments/sagas\";\nimport { getLikeSaga } from \"./like/sagas\";\n\nexport default function* rootSaga() {\n  yield all([\n    spawn(authUserSaga),\n    spawn(regUserSaga),\n    spawn(getUserData),\n    spawn(setUserData),\n    spawn(setAvatar),\n    spawn(getPostsData),\n    spawn(getPostCardData),\n    spawn(setPostSaga),\n    spawn(setMessageSaga),\n    spawn(getMessageSaga),\n    spawn(getCommentsSaga),\n    spawn(setCommentSaga),\n    spawn(getLikeSaga),\n  ]);\n}\n","import React from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { IRootState } from \"./store/rootReducer\";\n\nconst Posts = React.lazy(() => import(\"./components/Posts\"));\nconst Login = React.lazy(() => import(\"./components/auth/Login\"));\nconst Singin = React.lazy(() => import(\"./components/auth/Singin\"));\nconst Settings = React.lazy(() => import(\"./components/user/Settings\"));\nconst Profile = React.lazy(() => import(\"./components/user/Profile\"));\nconst RegSuccess = React.lazy(() => import(\"./components/auth/RegSuccess\"));\nconst PostCard = React.lazy(() => import(\"./components/PostCard\"));\nconst NotFound = React.lazy(() => import(\"./components/NotFound\"));\nconst AddPost = React.lazy(() => import(\"./components/AddPost\"));\nconst PostSuccess = React.lazy(() =>\n  import(\"./components/AddPost/PostSuccess\")\n);\nconst Likes = React.lazy(() => import(\"./components/Likes\"));\n// const MyMessages = React.lazy(() =>\n//   import(\"./components/MyMessages/MyMessages\")\n// );\n\nconst mapStateToProps = (state: IRootState) => ({\n  authToken: state.auth.authData.authToken,\n});\n\ntype IProps = ReturnType<typeof mapStateToProps>;\n\nconst Routes: React.FC<IProps> = (props) => {\n  return (\n    <React.Suspense\n      fallback={\n        <div className=\"progress\">\n          <div className=\"indeterminate\"></div>\n        </div>\n      }\n    >\n      <Switch>\n        {props.authToken && <Redirect exact from=\"/login\" to=\"/\" />}\n        {props.authToken && <Redirect exact from=\"/singin\" to=\"/\" />}\n        <Route exact path=\"/singin\" component={Singin} />\n        {!props.authToken && <Route path=\"/\" component={Login} />}\n\n        <Route exact path=\"/\" component={Posts} />\n        <Route exact path=\"/q-:q/page-:id\" component={Posts} />\n        <Route exact path=\"/page-:id\" component={Posts} />\n        <Route exact path=\"/q-:q\" component={Posts} />\n\n        <Route exact path=\"/myposts\" component={Posts} />\n        <Route exact path=\"/myposts/q-:q/page-:id\" component={Posts} />\n        <Route exact path=\"/myposts/page-:id\" component={Posts} />\n        <Route exact path=\"/myposts/q-:q\" component={Posts} />\n        <Route exact path=\"/login\" component={Login} />\n        <Route exact path=\"/singin\" component={Singin} />\n        <Route exact path=\"/regsuccess\" component={RegSuccess} />\n        <Route exact path=\"/settings\" component={Settings} />\n        <Route exact path=\"/profile\" component={Profile} />\n        <Route path=\"/profile/:id\" component={Profile} />\n        <Route path=\"/user/:id\" component={Profile} />\n        {/* <Route exact path=\"/mymessages\" component={MyMessages} />\n        <Route exact path=\"/mymessages/page-:id\" component={MyMessages} /> */}\n        <Route path=\"/postcard/:id\" component={PostCard} />\n        <Route exact path=\"/addpost\" component={AddPost} />\n        <Route path=\"/postedit-:id\" component={AddPost} />\n        <Route exact path=\"/postsaccess\" component={PostSuccess} />\n        <Route path=\"/likes\" component={Likes} />\n        <Route path=\"/postlike/:id\" component={Likes} />\n        <Route path=\"/\" component={NotFound} />\n      </Switch>\n    </React.Suspense>\n  );\n};\n\nexport default connect(mapStateToProps)(React.memo(Routes));\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport style from \"./style.module.scss\";\n\ninterface IProps {\n  unAuthUser: () => void;\n  isMobile: boolean;\n  authToken: string | null;\n}\n\nconst DropdownMenu = (props: IProps) => {\n  const closeMenuHandler = () => {\n    if (props.isMobile) {\n      const elem: HTMLElement | null = document.getElementById(\"mobile-demo\");\n      if (elem) {\n        const instance = M.Sidenav.getInstance(elem);\n        instance.close();\n      }\n    }\n  };\n\n  return props.authToken ? (\n    <React.Fragment>\n      <li onClick={closeMenuHandler}>\n        <Link to=\"/settings\" className=\"indigo-text accent-4\">\n          Settings\n        </Link>\n      </li>\n      <li onClick={closeMenuHandler}>\n        <Link\n          to=\"/login\"\n          className=\"indigo-text accent-4\"\n          onClick={() => props.unAuthUser()}\n        >\n          Log out\n        </Link>\n      </li>\n      {props.isMobile && (\n        <li className={style.close} onClick={closeMenuHandler}>\n          Закрыть\n        </li>\n      )}\n    </React.Fragment>\n  ) : (\n    <React.Fragment>\n      <li onClick={closeMenuHandler}>\n        <Link to=\"/login\" className=\"indigo-text accent-4\">\n          Log in\n        </Link>\n      </li>\n      <li onClick={closeMenuHandler}>\n        <Link to=\"/singin\" className=\"indigo-text accent-4\">\n          Sing in\n        </Link>\n      </li>\n      {props.isMobile && (\n        <li className={style.close} onClick={closeMenuHandler}>\n          Закрыть\n        </li>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default React.memo(DropdownMenu);\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport style from \"./style.module.scss\";\nimport classnames from \"classnames\";\n\ninterface IProps {\n  authToken: string | null;\n  nick: string | null;\n}\n\nconst RightAuthMenu = (props: IProps) => {\n  return props.authToken ? (\n    <a\n      className=\"dropdown-trigger black-text\"\n      href=\"#!\"\n      data-target=\"dropdown1\"\n    >\n      <span className={classnames(\"truncate left\", style.nick)}>\n        {props.nick}\n      </span>\n      <i className=\"material-icons right\">arrow_drop_down</i>\n    </a>\n  ) : (\n    <div className={style.logIn}>\n      <Link to=\"/singin\" className=\"indigo-text accent-4\">\n        Sing in\n      </Link>\n      <span>|</span>\n      <Link to=\"/login\" className=\"indigo-text accent-4\">\n        Log in\n      </Link>\n    </div>\n  );\n};\n\nexport default React.memo(RightAuthMenu);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport M from \"materialize-css\";\n\nimport style from \"./style.module.scss\";\nimport { Link } from \"react-router-dom\";\nimport { IRootState, IRootAction } from \"../../store/rootReducer\";\nimport * as authActions from \"../../store/auth/actions\";\nimport classnames from \"classnames\";\nimport DropdownMenu from \"./DropdownMenu/\";\nimport RightAuthMenu from \"./RightAuthMenu\";\n\nconst mapStateToProps = (state: IRootState) => ({\n  authToken: state.auth.authData.authToken,\n  nick: state.auth.authData.login,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IRootAction>) =>\n  bindActionCreators(\n    {\n      unAuthUser: authActions.unAuthUser,\n    },\n    dispatch\n  );\n\ntype IProps = ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps>;\n\nconst Header: React.FC<IProps> = (props) => {\n  React.useEffect(() => {\n    let dropdowns = document.querySelectorAll(\".dropdown-trigger\");\n    M.Dropdown.init(dropdowns, {});\n  }, [props.authToken]);\n\n  document.addEventListener(\"DOMContentLoaded\", function (e) {\n    let elems = document.querySelectorAll(\".sidenav\");\n    M.Sidenav.init(elems);\n  });\n\n  return (\n    <React.Fragment>\n      <nav className={classnames(\"white\", style.NavWrapper)}>\n        <div className={classnames(\"container\", style.h100)}>\n          <div className=\"nav-wrapper\">\n            <Link className=\"left brand-logo black-text\" to=\"/\">\n              Hipstogram\n            </Link>\n            <a\n              href=\"!#\"\n              data-target=\"mobile-demo\"\n              className=\"sidenav-trigger right hide-on-med-and-up black-text\"\n            >\n              <i className=\"material-icons\">menu</i>\n            </a>\n            <ul className=\"right\">\n              <li className=\"hide-on-small-and-down\">\n                <RightAuthMenu authToken={props.authToken} nick={props.nick} />\n              </li>\n            </ul>\n          </div>\n        </div>\n      </nav>\n      <ul\n        id=\"dropdown1\"\n        className={classnames(\n          style.dropdownPosition,\n          \"dropdown-content black-text\"\n        )}\n      >\n        <DropdownMenu\n          isMobile={false}\n          unAuthUser={props.unAuthUser}\n          authToken={props.authToken}\n        />\n      </ul>\n      <ul className=\"sidenav\" id=\"mobile-demo\">\n        <DropdownMenu\n          isMobile={true}\n          unAuthUser={props.unAuthUser}\n          authToken={props.authToken}\n        />\n      </ul>\n    </React.Fragment>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(React.memo(Header));\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport style from \"./style.module.scss\";\n\ninterface IProps {\n  authToken: string | null;\n  nick: string | null;\n  avatar: string | undefined;\n  id: string | null;\n}\n\nconst RightAuthMenu = (props: IProps) => {\n  return props.authToken ? (\n    <div className={style.navWraper}>\n      <ul className={style.navBar}>\n        <li>\n          <Link to=\"/myposts\">\n            <span className=\"material-icons black-text\">house</span>\n          </Link>\n        </li>\n        <li>\n          <Link to=\"/\">\n            <span className=\"material-icons black-text\">search</span>\n          </Link>\n        </li>\n        <li>\n          <Link to=\"/addpost\">\n            <span className=\"material-icons black-text\">add</span>\n          </Link>\n        </li>\n        <li>\n          <Link to=\"/likes\">\n            <span className=\"material-icons black-text\">favorite_border</span>\n          </Link>\n        </li>\n        <li>\n          <Link to={`/profile/${props.id}`}>\n            {props.avatar ? (\n              <img src={`/${props.avatar}`} alt=\"photoUser\" />\n            ) : (\n              <span className=\"large material-icons black-text\">face</span>\n            )}\n          </Link>\n        </li>\n      </ul>\n    </div>\n  ) : (\n    <div className={style.navWraper}>\n      <ul className={style.navBar}>\n        <li>\n          <a className=\"right black-text text-lighten-4 \" href=\"#!\">\n            © 2020 Hipstogram\n          </a>\n        </li>\n        <li>\n          <a className=\"right black-text text-lighten-4 mobile\" href=\"#!\">\n            hipstagram@gmail.com\n          </a>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default React.memo(RightAuthMenu);\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport style from \"./style.module.scss\";\nimport { IRootState, IRootAction } from \"../../store/rootReducer\";\nimport * as authActions from \"../../store/auth/actions\";\nimport * as profileActions from \"../../store/profile/actions\";\nimport NavWraper from \"./NavWraper\";\n\nconst mapStateToProps = (state: IRootState) => ({\n  authToken: state.auth.authData.authToken,\n  nick: state.auth.authData.login,\n  avatar: state.profile.profileData.avatar?.url,\n  id: state.profile.profileData._id,\n  _id: state.auth.authData.id,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<IRootAction>) =>\n  bindActionCreators(\n    {\n      getProfile: profileActions.getProfile.request,\n      unAuthUser: authActions.unAuthUser,\n    },\n    dispatch\n  );\n\ntype IProps = ReturnType<typeof mapDispatchToProps> &\n  ReturnType<typeof mapStateToProps>;\n\nconst Footer: React.FC<IProps> = (props: IProps) => {\n  useEffect(() => {\n    if (!props.id) {\n      props.getProfile({ idUser: props._id });\n    }\n  }, [props]);\n\n  return (\n    <footer className={style.footer}>\n      <NavWraper\n        authToken={props.authToken}\n        nick={props.nick}\n        avatar={props.avatar}\n        id={props._id}\n      />\n    </footer>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(React.memo(Footer));\n","import React from \"react\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { ConnectedRouter, routerMiddleware } from \"connected-react-router\";\n\nimport \"materialize-css/dist/css/materialize.min.css\";\nimport \"./App.css\";\n\nimport history from \"./history\";\nimport rootReducer from \"./store/rootReducer\";\nimport rootSaga from \"./store/rootSaga\";\nimport Routes from \"./Routes\";\nimport Header from \"./components/Header/\";\nimport Footer from \"./components/Footer\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(routerMiddleware(history), sagaMiddleware)\n  )\n);\n\nsagaMiddleware.run(rootSaga);\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <ConnectedRouter history={history}>\n        <Header />\n        <main>\n          <div className=\"container\">\n            <Routes />\n          </div>\n        </main>\n        <Footer />\n      </ConnectedRouter>\n    </Provider>\n  );\n};\n\nexport default React.memo(App);\n","const isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    window.location.hostname === \"[::1]\" ||\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config);\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              console.log(\"Content is cached for offline use.\");\n\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}